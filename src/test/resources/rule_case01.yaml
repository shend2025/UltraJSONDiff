# you can define multiple subRule
- subRule:
    # JSONPath expression to specify which part of the JSON to apply this rule to
    jsonPath: $.user
    # Whether the target JSON can have additional fields not present in the expected JSON
    extensible: true
    # Whether arrays should be compared in strict order (true) or allow reordering (false)
    strictOrder: true
    # Whether to ignore null values during comparison
    ignoreNull: true
    # Whether to stop comparison immediately when first difference is found
    fastFail: false
    preProcess:
      # Remove specific nodes from JSON before comparison
      removeNode:
        jsonPath: ""
      removeNode:
        jsonPath: ""  
    # Custom comparison rules to apply to this JSONPath
    customRules:
      # Apply number precision comparison to all age fields (3 decimal places, rounding mode 3)
      - name: NumberPrecise
        jsonPath: "**.age"
        param: "newScale=3,roundingMode=3"
      # Compare arrays using a specific key field for matching elements
      - name: ArrayWithKey
        jsonPath: "$"
        param: "key=id"
      # Ignore specific paths during comparison
      - name: IngorePath  # which path will be ignored
        param: "user.queryTimestamp"
      # Allow array elements to be in any order
      - name: ArrayDisorder
        jsonPath: "**.ordersWithoutOrder"
      # Recursively compare array elements
      - name: ArrayRecursively
        jsonPath:
        param:
      # Compare degree values with specified tolerance
      - name: DegreePrecise
        jsonPath:
        param: "tolerance=10e-1"
      # Compare radian values with specified tolerance
      - name: RadianPrecise
        jsonPath:
        param: "tolerance=10e-4"
      # Compare values with tolerance for floating point differences
      - name: TolerantValue
        jsonPath: ""
        param: "tolerance=10e-4"
      # Compare values with percentage-based tolerance
      - name: PercentTolerant
        jsonPath: ""
        param: "tolerance=10e-4"
      # Compare position values with tolerance (e.g., {"position": "-300.0,-250.0"})
      - name: ImprecisePosition #egï¼š {"position": "-300.0,-250.0"}
        jsonPath: ""
        param: "tolerance=0.01;separator=,"

- subRule:
    jsonPath: $.ordersStrictOrder
    extensible: true
    strictOrder: true
    ignoreNull: true
    fastFail: false
    preProcess: # TODO
      removeNode:
        jsonPath: ""
      escape:
        jsonPath: ""
    customRules:
      - name: ArrayWithKey
        jsonPath: "$"
        param: "key=orderId"
      - name: NumberPrecise
        jsonPath: "**user.age"
        param: "newScale=3,roundingMode=3"
- subRule:
    jsonPath: $.ordersWithoutOrder
    extensible: true
    strictOrder: false
    ignoreNull: true
    fastFail: false
    preProcess: # TODO
      removeNode:
        jsonPath: ""
      escape:
        jsonPath: ""
    customRules:
      - name: ArrayDisorder
        jsonPath: "$"
      - name: NumberPrecise
        jsonPath: "**user.age"
        param: "newScale=3,roundingMode=3"

# as enum value
- ruleType:
  - IngorePath
  - ArrayWithKey
  - NumberPrecise
  - EscapedJson
  - ArrayInOrder
  - ArrayLength
  - DegreePrecise
  - RadianPrecise
  - ArrayDisorder
  - ArrayRecursively
  - TolerantValue
  - PercentTolerant
  - ImprecisePosition
  - EmptyValue

